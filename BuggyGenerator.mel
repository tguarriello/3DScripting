//TODO:
/*
-change pCube1 to `selectedObject(s)`.
-find way to build inner lattice automatically
-Create JointObjects(???) on all corners
-Properlly name/Group Objects
-Make simple process for attaching buggy parts (without duplicates!)
-Create Documentation/Guidelines to using script
*/
buildLatticeStructure();

proc buildLatticeStructure()
{
   //string $selectedObject[] = `ls -selection`;
   float $barRadiusFloat = 2;
   int $numEdges1[] =  `polyEvaluate -e pCube1`;
   float $size1 = $numEdges1[0];
   //select cube; get list of strings that polyInfo returns (Eg,  EDGE      8:      2      4  Hard)
   for($i = 0; $i < $size1; $i++)
   {
       select -r pCube1.e[$i];
       string $verts[] = `polyInfo -edgeToVertex`;
       //parse vertex indecies from $verts[]
       string $tokens[];
       tokenize $verts[0] " :\n\r" $tokens;
       //get vertIndecies
       int $vertIndex1 = $tokens[2];
       int $vertIndex2 = $tokens[3];
       //get verts as floats[] array
       float $vertex1[] = `pointPosition pCube1.vtx[$vertIndex2]`;
       float $vertex2[] = `pointPosition pCube1.vtx[$vertIndex1]`;
       
       //calculate length and spawnPoint
       float $diffX = $vertex1[0] - $vertex2[0];
       float $diffY = $vertex1[1] - $vertex2[1];
       float $diffZ = $vertex1[2] - $vertex2[2];
       float $barLength = sqrt( ($diffX*$diffX) + ($diffY*$diffY) + ($diffZ*$diffZ) );
       //bar spawns at midpoint of edge
       float $barSpawn[] = { ($vertex1[0] + $vertex2[0])/2 , ($vertex1[1] + $vertex2[1])/2, ($vertex1[2] + $vertex2[2])/2}; 
       
       //get endpoint of cylinder
       float $cylinderEnd[] = {$barSpawn[0], $barSpawn[1] - $barLength, $barSpawn[2]};
          
       float $vertWOSpawn[] = {$vertex1[0] - $barSpawn[0], $vertex1[1] - $barSpawn[1], $vertex1[2] - $barSpawn[2] };
       float $cylEndWOSpawn[] = {$cylinderEnd[0] - $barSpawn[0], $cylinderEnd[1] - $barSpawn[1], $cylinderEnd[2] - $barSpawn[2] };
       float $eulerRot[] = `angleBetween -er -v1 $vertWOSpawn[0] $vertWOSpawn[1] $vertWOSpawn[2] -v2 $cylEndWOSpawn[0] $cylEndWOSpawn[1] $cylEndWOSpawn[2]`;
       
       //Create polyCylinder (bar)
       polyCylinder -r $barRadiusFloat -sx 8 -h $barLength -n ("Bar_" + $i);
       move -ws $barSpawn[0] $barSpawn[1] $barSpawn[2];
       rotate -ws  -eu ($eulerRot[0] * -1) ($eulerRot[1] ) ($eulerRot[2]* -1 );
       //delete end faces
       select -r ("Bar_" + $i + ".f[8]") ("Bar_" + $i + ".f[9]");
       delete; 
    };
    //Attach all bars to eachother
    select -r "Bar_**";
    polyUnite -ch 0 -n "Cage_01";
    polyMergeVertex  -d 0.01 -am 1 -ch 1 Cage_01;
}



